// <auto-generated />
using System;
using ICS.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ICS.DAL.Migrations
{
    [DbContext(typeof(IcsDbContext))]
    [Migration("20240301142312_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("ActivityEntityStudent", b =>
                {
                    b.Property<Guid>("ActivitiesEntityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentsUserLogin")
                        .HasColumnType("TEXT");

                    b.HasKey("ActivitiesEntityId", "StudentsUserLogin");

                    b.HasIndex("StudentsUserLogin");

                    b.ToTable("ActivityEntityStudent");
                });

            modelBuilder.Entity("ICS.DAL.Entities.ActivityEntity", b =>
                {
                    b.Property<Guid>("EntityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ActivityName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubjectAbbr")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TeacherLogin")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TeacherUserLogin")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EntityId");

                    b.HasIndex("RoomName");

                    b.HasIndex("SubjectAbbr");

                    b.HasIndex("TeacherUserLogin");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("ICS.DAL.Entities.Admin", b =>
                {
                    b.Property<string>("UserLogin")
                        .HasColumnType("TEXT");

                    b.HasKey("UserLogin");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("ICS.DAL.Entities.EvaluationEntity", b =>
                {
                    b.Property<Guid>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ActivityEntityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentUserLogin")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ActivityId");

                    b.HasIndex("ActivityEntityId");

                    b.HasIndex("StudentUserLogin");

                    b.ToTable("Evaluations");
                });

            modelBuilder.Entity("ICS.DAL.Entities.OneOffActivityEntity", b =>
                {
                    b.Property<Guid>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("ActivityDate")
                        .HasColumnType("TEXT");

                    b.HasKey("ActivityId");

                    b.ToTable("OneOffActivities");
                });

            modelBuilder.Entity("ICS.DAL.Entities.PeriodicActivityDateEntity", b =>
                {
                    b.Property<Guid>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("IdNumber")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PeriodicActivityActivityId")
                        .HasColumnType("TEXT");

                    b.HasKey("ActivityId");

                    b.HasIndex("PeriodicActivityActivityId");

                    b.ToTable("PeriodicActivityDates");
                });

            modelBuilder.Entity("ICS.DAL.Entities.PeriodicActivityEntity", b =>
                {
                    b.Property<Guid>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Day")
                        .HasColumnType("INTEGER");

                    b.HasKey("ActivityId");

                    b.ToTable("PeriodicActivities");
                });

            modelBuilder.Entity("ICS.DAL.Entities.Room", b =>
                {
                    b.Property<string>("RoomName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Floor")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Purpose")
                        .HasColumnType("TEXT");

                    b.HasKey("RoomName");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("ICS.DAL.Entities.Student", b =>
                {
                    b.Property<string>("UserLogin")
                        .HasColumnType("TEXT");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserLogin");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("ICS.DAL.Entities.Subject", b =>
                {
                    b.Property<string>("Abbr")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Compulsorily")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Abbr");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("ICS.DAL.Entities.Teacher", b =>
                {
                    b.Property<string>("UserLogin")
                        .HasColumnType("TEXT");

                    b.HasKey("UserLogin");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("ICS.DAL.Entities.User", b =>
                {
                    b.Property<string>("Login")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Birth")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Login");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("StudentSubject", b =>
                {
                    b.Property<string>("StudentsUserLogin")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubjectsAbbr")
                        .HasColumnType("TEXT");

                    b.HasKey("StudentsUserLogin", "SubjectsAbbr");

                    b.HasIndex("SubjectsAbbr");

                    b.ToTable("StudentSubject");
                });

            modelBuilder.Entity("SubjectTeacher", b =>
                {
                    b.Property<string>("SubjectsAbbr")
                        .HasColumnType("TEXT");

                    b.Property<string>("TeachersUserLogin")
                        .HasColumnType("TEXT");

                    b.HasKey("SubjectsAbbr", "TeachersUserLogin");

                    b.HasIndex("TeachersUserLogin");

                    b.ToTable("SubjectTeacher");
                });

            modelBuilder.Entity("ActivityEntityStudent", b =>
                {
                    b.HasOne("ICS.DAL.Entities.ActivityEntity", null)
                        .WithMany()
                        .HasForeignKey("ActivitiesEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ICS.DAL.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsUserLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ICS.DAL.Entities.ActivityEntity", b =>
                {
                    b.HasOne("ICS.DAL.Entities.OneOffActivityEntity", "OneOff")
                        .WithOne("Activity")
                        .HasForeignKey("ICS.DAL.Entities.ActivityEntity", "EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ICS.DAL.Entities.PeriodicActivityEntity", "Periodic")
                        .WithOne("Activity")
                        .HasForeignKey("ICS.DAL.Entities.ActivityEntity", "EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ICS.DAL.Entities.Room", "Room")
                        .WithMany("Activities")
                        .HasForeignKey("RoomName")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ICS.DAL.Entities.Subject", "Subject")
                        .WithMany("Activities")
                        .HasForeignKey("SubjectAbbr")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ICS.DAL.Entities.Teacher", "Teacher")
                        .WithMany("Activities")
                        .HasForeignKey("TeacherUserLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OneOff");

                    b.Navigation("Periodic");

                    b.Navigation("Room");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ICS.DAL.Entities.Admin", b =>
                {
                    b.HasOne("ICS.DAL.Entities.User", "User")
                        .WithOne("Admin")
                        .HasForeignKey("ICS.DAL.Entities.Admin", "UserLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ICS.DAL.Entities.EvaluationEntity", b =>
                {
                    b.HasOne("ICS.DAL.Entities.ActivityEntity", "Activity")
                        .WithMany("Evaluations")
                        .HasForeignKey("ActivityEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ICS.DAL.Entities.Student", "Student")
                        .WithMany("Evaluations")
                        .HasForeignKey("StudentUserLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ICS.DAL.Entities.PeriodicActivityDateEntity", b =>
                {
                    b.HasOne("ICS.DAL.Entities.PeriodicActivityEntity", "PeriodicActivity")
                        .WithMany("ActivityDates")
                        .HasForeignKey("PeriodicActivityActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PeriodicActivity");
                });

            modelBuilder.Entity("ICS.DAL.Entities.Student", b =>
                {
                    b.HasOne("ICS.DAL.Entities.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("ICS.DAL.Entities.Student", "UserLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ICS.DAL.Entities.Teacher", b =>
                {
                    b.HasOne("ICS.DAL.Entities.User", "User")
                        .WithOne("Teacher")
                        .HasForeignKey("ICS.DAL.Entities.Teacher", "UserLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentSubject", b =>
                {
                    b.HasOne("ICS.DAL.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsUserLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ICS.DAL.Entities.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectsAbbr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SubjectTeacher", b =>
                {
                    b.HasOne("ICS.DAL.Entities.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectsAbbr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ICS.DAL.Entities.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersUserLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ICS.DAL.Entities.ActivityEntity", b =>
                {
                    b.Navigation("Evaluations");
                });

            modelBuilder.Entity("ICS.DAL.Entities.OneOffActivityEntity", b =>
                {
                    b.Navigation("Activity")
                        .IsRequired();
                });

            modelBuilder.Entity("ICS.DAL.Entities.PeriodicActivityEntity", b =>
                {
                    b.Navigation("Activity")
                        .IsRequired();

                    b.Navigation("ActivityDates");
                });

            modelBuilder.Entity("ICS.DAL.Entities.Room", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("ICS.DAL.Entities.Student", b =>
                {
                    b.Navigation("Evaluations");
                });

            modelBuilder.Entity("ICS.DAL.Entities.Subject", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("ICS.DAL.Entities.Teacher", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("ICS.DAL.Entities.User", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });
#pragma warning restore 612, 618
        }
    }
}
